// lib/google-sheets/service.ts (‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà)
import { google } from 'googleapis';

interface TaskData {
  taskCategory: string;    // ‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô (Column E)
  taskName: string;        // ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô (Column B)
  projectName: string;     // ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (Column C)
  taskUid?: string;        // ‡∏•‡∏≥‡∏î‡∏±‡∏ö (Column A)
  startDate?: string;      // ‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
  finishDate?: string;     // ‡∏ß‡∏±‡∏ô‡∏à‡∏ö
  percentComplete?: number; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
}

interface SheetConfig {
  sheetId: string;
  sheetName: string;
}

export class GoogleSheetsService {
  private sheets: any;

  constructor() {
    const auth = new google.auth.GoogleAuth({
      credentials: {
        client_email: process.env.GOOGLE_SHEETS_CLIENT_EMAIL,
        private_key: process.env.GOOGLE_SHEETS_PRIVATE_KEY?.replace(/\\n/g, '\n'),
      },
      scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
    });

    this.sheets = google.sheets({ version: 'v4', auth });
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets
   */
  async getSheetData(sheetId: string, sheetName: string = 'DB_TaskOverview'): Promise<any[]> {
    try {
      console.log(`üìä Reading from sheet: ${sheetId}/${sheetName}`);
      
      const response = await this.sheets.spreadsheets.values.get({
        spreadsheetId: sheetId,
        range: `${sheetName}!A:Z`, // ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
      });

      const rows = response.data.values || [];
      
      if (rows.length === 0) {
        throw new Error('No data found in sheet');
      }

      // ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô header
      const headers = rows[0];
      const dataRows = rows.slice(1);

      console.log(`üìã Found ${dataRows.length} rows with headers:`, headers);

      return dataRows.map((row: any[]) => {
        const rowData: any = {};
        headers.forEach((header: string, index: number) => {
          rowData[header] = row[index] || '';
        });
        return rowData;
      });

    } catch (error) {
      console.error('‚ùå Error reading from Google Sheets:', error);
      throw new Error(`Cannot read from Google Sheets: ${error}`);
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å sheet
   */
  async getAvailableProjects(sheetId: string, sheetName: string = 'DB_TaskOverview'): Promise<string[]> {
    try {
      const data = await this.getSheetData(sheetId, sheetName);
      
      // ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'
      const projects = Array.from(new Set(
        data
          .map((row: any) => row['‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'] || row['Project'] || '') // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
          .filter((project: string) => project.trim())
          .map((project: string) => project.trim())
      )).sort();

      console.log(`üèóÔ∏è Found ${projects.length} projects:`, projects);
      
      return projects;

    } catch (error) {
      console.error('‚ùå Error getting projects:', error);
      throw error;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
   */
  async getTaskCategoriesByProject(sheetId: string, projectName: string, sheetName: string = 'DB_TaskOverview'): Promise<string[]> {
    try {
      const data = await this.getSheetData(sheetId, sheetName);
      
      // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
      const projectTasks = data.filter((row: any) => {
        const rowProject = row['‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'] || row['Project'] || '';
        return rowProject.trim() === projectName.trim();
      });

      // ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
      const categories = Array.from(new Set(
        projectTasks
          .map((row: any) => row['‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô'] || row['Category'] || '')
          .filter((category: string) => category.trim())
          .map((category: string) => category.trim())
      )).sort();

      console.log(`üìÇ Project "${projectName}" has ${categories.length} categories:`, categories);
      
      return categories;

    } catch (error) {
      console.error('‚ùå Error getting categories:', error);
      throw error;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô
   */
  async getTasksByProjectAndCategory(
    sheetId: string, 
    projectName: string, 
    category: string, 
    sheetName: string = 'DB_TaskOverview'
  ): Promise<TaskData[]> {
    try {
      const data = await this.getSheetData(sheetId, sheetName);
      
      // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô
      const filteredTasks = data.filter((row: any) => {
        const rowProject = row['‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'] || row['Project'] || '';
        const rowCategory = row['‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô'] || row['Category'] || '';
        
        return rowProject.trim() === projectName.trim() && 
               rowCategory.trim() === category.trim();
      });

      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô TaskData format
      const tasks: TaskData[] = filteredTasks.map((row: any) => ({
        taskCategory: row['‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô'] || row['Category'] || '',
        taskName: row['‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô'] || row['Task Name'] || '',
        projectName: row['‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'] || row['Project'] || '',
        taskUid: row['‡∏•‡∏≥‡∏î‡∏±‡∏ö'] || row['UID'] || '',
        startDate: row['‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°'] || row['Start Date'] || '',
        finishDate: row['‡∏ß‡∏±‡∏ô‡∏à‡∏ö'] || row['Finish Date'] || '',
        percentComplete: parseFloat(row['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤'] || row['Progress'] || '0') || 0
      }));

      console.log(`üìã Found ${tasks.length} tasks for "${projectName}" > "${category}"`);
      
      return tasks;

    } catch (error) {
      console.error('‚ùå Error getting tasks:', error);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô sheet ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  async validateProjectInSheet(sheetId: string, projectName: string, sheetName: string = 'DB_TaskOverview'): Promise<{
    isValid: boolean;
    availableProjects: string[];
    tasksCount?: number;
  }> {
    try {
      const availableProjects = await this.getAvailableProjects(sheetId, sheetName);
      const isValid = availableProjects.includes(projectName);
      
      let tasksCount = 0;
      if (isValid) {
        const data = await this.getSheetData(sheetId, sheetName);
        tasksCount = data.filter((row: any) => {
          const rowProject = row['‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'] || row['Project'] || '';
          return rowProject.trim() === projectName.trim();
        }).length;
      }

      return {
        isValid,
        availableProjects,
        tasksCount
      };

    } catch (error) {
      console.error('‚ùå Error validating project:', error);
      throw error;
    }
  }
}

// Export singleton instance
export const googleSheetsService = new GoogleSheetsService();