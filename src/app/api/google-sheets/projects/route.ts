// app/api/google-sheets/projects/route.ts (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
import { NextRequest, NextResponse } from 'next/server';
// üîΩ 1. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô import: ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ bimTrackingDb ‡πÅ‡∏•‡∏∞ adminAuth
import { adminAuth, bimTrackingDb } from '@/lib/firebase/admin'; 

// üóëÔ∏è 2. ‡∏•‡∏ö import ‡∏Ç‡∏≠‡∏á googleSheetsService ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
// import { googleSheetsService } from '@/lib/google-sheets/service';

export async function POST(request: NextRequest) {
  try {
    // --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ---
    const authHeader = request.headers.get('authorization');
    if (!authHeader?.startsWith('Bearer ')) {
      return NextResponse.json({ error: 'Authorization required' }, { status: 401 });
    }
    const token = authHeader.split('Bearer ')[1];
    const decodedToken = await adminAuth.verifyIdToken(token);

    // --- üîΩ 3. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Logic ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ sheetId ‡∏à‡∏≤‡∏Å body ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    // const { sheetId, sheetName } = await request.json();
    
    // Query ‡πÑ‡∏õ‡∏¢‡∏±‡∏á collection 'projects' ‡πÉ‡∏ô Firestore ‡∏Ç‡∏≠‡∏á BIM-Tracking
    const projectsSnapshot = await bimTrackingDb.collection('projects').get();

    if (projectsSnapshot.empty) {
      return NextResponse.json({
        success: true,
        data: {
          projects: [],
          totalProjects: 0,
          userId: decodedToken.uid
        }
      });
    }

    // Map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Firestore ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà Frontend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (array of strings)
    const projects = projectsSnapshot.docs.map(doc => doc.data().name);

    return NextResponse.json({
      success: true,
      data: {
        projects,
        totalProjects: projects.length,
        userId: decodedToken.uid
      }
    });

  } catch (error: any) {
    console.error('‚ùå Firestore projects API error:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error.message 
      }, 
      { status: 500 }
    );
  }
}