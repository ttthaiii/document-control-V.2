"use strict";(()=>{var e={};e.id=777,e.ids=[777],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},84770:e=>{e.exports=require("crypto")},22339:(e,t,i)=>{i.r(t),i.d(t,{originalPathname:()=>m,patchFetch:()=>I,requestAsyncStorage:()=>p,routeModule:()=>d,serverHooks:()=>v,staticGenerationAsyncStorage:()=>u});var r={};i.r(r),i.d(r,{POST:()=>l});var a=i(49303),n=i(88716),o=i(60670),s=i(87070),c=i(45758);async function l(e){try{let{email:t,role:i,sites:r}=await e.json();if(!t||!i||!r)return s.NextResponse.json({error:"Missing required fields"},{status:400});let a=await c.e.createInvitation({email:t,role:i,sites:r});return s.NextResponse.json(a)}catch(e){return console.error("Error in invite API:",e),s.NextResponse.json({error:"Failed to create invitation"},{status:500})}}let d=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/admin/invite/route",pathname:"/api/admin/invite",filename:"route",bundlePath:"app/api/admin/invite/route"},resolvedPagePath:"D:\\ttsdoc-v2\\src\\app\\api\\admin\\invite\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:p,staticGenerationAsyncStorage:u,serverHooks:v}=d,m="/api/admin/invite/route";function I(){return(0,o.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:u})}},45758:(e,t,i)=>{i.d(t,{e:()=>n});var r=i(40416),a=i(84770);class n{static async createInvitation(e){try{let t=(0,a.randomBytes)(32).toString("hex"),i=new Date(Date.now()+6048e5);await r.iW.collection("invitations").doc(t).set({...e,status:"PENDING",createdAt:new Date,expiresAt:i,createdByAdmin:!0});let n=`http://localhost:3000/accept-invitation?token=${t}`;return{success:!0,token:t,invitationUrl:n,expiresAt:i}}catch(e){throw console.error("Error creating invitation:",e),Error("Failed to create invitation")}}static async acceptInvitation(e,t){try{let i=await r.iW.collection("invitations").doc(e).get();if(!i.exists)throw Error("Invalid or expired invitation token.");let a=i.data(),n=await r.CZ.createUser({email:a.email,password:t,emailVerified:!0}),o=Array.isArray(a.sites)?a.sites:[a.sites].filter(Boolean);return await r.iW.collection("users").doc(n.uid).set({email:a.email,role:a.role,sites:o,status:"ACTIVE",createdFromInvitation:!0,acceptedAt:new Date}),await r.iW.collection("invitations").doc(e).update({status:"ACCEPTED",acceptedAt:new Date,acceptedBy:n.uid}),{success:!0,userId:n.uid,message:"Account created successfully! You can now login."}}catch(e){throw console.error("Error accepting invitation:",e),e}}static async getInvitation(e){try{let t=await r.iW.collection("invitations").doc(e).get();if(!t.exists)return{success:!1,error:"Invalid invitation"};let i=t.data();return{success:!0,invitation:{email:i.email,role:i.role,status:i.status,expiresAt:i.expiresAt.toDate()}}}catch(e){return console.error("Error getting invitation:",e),{success:!1,error:"Failed to get invitation"}}}}},40416:(e,t,i)=>{i.d(t,{CZ:()=>d,Hf:()=>p,iW:()=>l,uE:()=>u});let r=require("firebase-admin");var a=i.n(r);let n={credential:a().credential.cert({projectId:process.env.TTSDOC_PROJECT_ID,clientEmail:process.env.TTSDOC_CLIENT_EMAIL,privateKey:process.env.TTSDOC_PRIVATE_KEY?.replace(/\\n/g,"\n")}),storageBucket:"ttsdocumentcontrol.firebasestorage.app"},o={credential:a().credential.cert({projectId:process.env.BIM_TRACKING_PROJECT_ID,clientEmail:process.env.BIM_TRACKING_CLIENT_EMAIL,privateKey:process.env.BIM_TRACKING_PRIVATE_KEY?.replace(/\\n/g,"\n")})},s=a().apps.find(e=>e?.name==="ttsdoc-v2")||a().initializeApp(n,"ttsdoc-v2"),c=a().apps.find(e=>e?.name==="bim-tracking")||a().initializeApp(o,"bim-tracking"),l=s.firestore(),d=s.auth(),p=s.storage().bucket(),u=c.firestore()}};var t=require("../../../../webpack-runtime.js");t.C(e);var i=e=>t(t.s=e),r=t.X(0,[948,972],()=>i(22339));module.exports=r})();